- name: login into private registry
  docker_login:
    registry: "{{ docker_private_registry }}"
    username: "{{ docker_private_registry_user }}"
    password: "{{ docker_private_registry_password }}"
    reauthorize: yes
  ignore_errors: yes

- name: copy docker images scripts
  copy:
    src: "Scripts/pull_images.sh"
    dest: "{{ images_pull_scripts_dir }}"
    mode: +x

- name: pull images
  shell: "{{ images_pull_scripts_dir }}/pull_images.sh"

- name: install kubernetes rpm pkg
  shell: yum localinstall -y {{ rpm_dir }}/*.rpm

- name: create pki directory
  file:
    path: "/etc/kubernetes/pki"
    state: directory

- name: create manifests directory
  file:
    path: "/etc/kubernetes/manifests"
    state: directory

- name: create kubectl directory
  file:
    path: "~/.kube"
    state: directory

- name: copy manifests files
  template: 
    src: "{{ item }}"
    dest: "/etc/kubernetes/manifests/{{ item | basename | regex_replace('.j2','') }}"
    mode: +x
  with_fileglob:
    - ../templates/manifests/*.j2

- name: copy certScripts
  template:
    src: "Scripts/createCA.sh.j2"
    dest: "/etc/kubernetes/pki/createCA.sh"
    mode: +x

- name: copy proxy cert
  template: 
    src: "Scripts/createProxyCa.sh.j2"
    dest: "/etc/kubernetes/pki/createProxyCa.sh"
    mode: +x

- name: install cfssl
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
    dest: /usr/local/bin/cfssl
    mode: +x

- name: install cfssljson
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
    dest: /usr/local/bin/cfssljson
    mode: +x

- name: install cfssl-cert-info
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64
    dest: /usr/local/bin/cfssl-certinfo
    mode: +x

- name: generate certs and keys
  command: chdir=../etc/kubernetes/pki ./createCA.sh

- name: generate Proxy CA
  command: chdir=../etc/kubernetes/pki ./createProxyCa.sh

- name: copy stand-alone kubelet config
  copy:
    src: "kubelet_cfg/10-kubeadm.conf.1"
    dest: "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
    mode: +x
    backup: yes

- name: start kubelet
  systemd:
    name: kubelet
    state: started
    enabled: true
    daemon_reload: yes

- name: copy kubectl config file
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "~/.kube/config"

- pause:
    seconds: 30 

- name: create clusterrolebinding
  shell: kubectl create clusterrolebinding kubelet-bootstrap --clusterrole=system:node-bootstrapper --user=kubelet-bootstrap
  delegate_to: "{{ master1 }}"
  run_once: true

- name: copy boot-strap kubelet config
  copy:
    src: "kubelet_cfg/10-kubeadm.conf.2"
    dest: "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
    mode: +x

- name: restart kubelet
  systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    
- pause:
    seconds: 30

- name: approve csr
  shell: "kubectl get csr | awk 'NR>=2{print $1}' | xargs kubectl certificate approve"
  run_once: true
  delegate_to: "{{ master1 }}"

- name: copy full kubelet config
  copy:
    src: "kubelet_cfg/10-kubeadm.conf.3"
    dest: "/etc/systemd/system/kubelet.service.d/10-kubeadm.conf"
    mode: +x
  notify: 
  - restart kubelet
  - short pause
  - label master
